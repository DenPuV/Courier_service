@page "/settings"
@using Courier_service.Models
@using Microsoft.AspNetCore.Components.Web
@inherits OwningComponentBase<DatabaseService>
@attribute [Authorize(Roles = "Client")]

<AuthorizeView>
	<Authorized>
		@if (clients == null)
		{
			<MudSkeleton SkeletonType="@SkeletonType.Text" Width="40%" />
		}
		else
		{
			if (CurrentClient == null)
			{
				<h1>ХТО ТЫ! ВВОДИ СВОИ ДАННЫЕ!</h1>
				<NewClientComponent OnClickCallback="@AddClient" />
			}
			else
			{
				<h1>Ты @CurrentClient.FName @CurrentClient.SName! </h1>
				<NewClientComponent Client="@CurrentClient" OnClickCallback="@UpdateClient" />
			}
		}
	</Authorized>
	<NotAuthorized>
		<h3>Log in first!</h3>
	</NotAuthorized>
</AuthorizeView>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	public System.Collections.Generic.IList<Client> clients;
	public Client CurrentClient = null;
	public string UserName = null;

	protected override async void OnInitialized()
	{
		var authState = await authenticationStateTask;
		var user = authState.User;
		UserName = user.Identity.Name;

		clients = await Service.ClientDataAsync();
		var _c = from t in clients
				 where t.AspName == UserName
				 select t;

		CurrentClient = _c.FirstOrDefault();


		try { this.StateHasChanged(); }
		catch { }
	}

	private void AddClient(Client client)
	{
		client.AspName = UserName;
		Service.AddClient(client);
		this.StateHasChanged();
	}

	private void UpdateClient(Client client)
	{
		CurrentClient = client;
		Service.UpdateClient(client);
		this.StateHasChanged();
	}
}
