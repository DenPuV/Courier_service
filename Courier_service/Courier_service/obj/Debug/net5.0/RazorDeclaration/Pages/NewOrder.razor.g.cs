// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Courier_service.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\_Imports.razor"
using Courier_service;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\_Imports.razor"
using Courier_service.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\Pages\NewOrder.razor"
using BlazorLeaflet.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\Pages\NewOrder.razor"
using Courier_service.Services.LocationService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\Pages\NewOrder.razor"
           [Authorize(Roles = "Client")]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/neworder")]
    public partial class NewOrder : NewOrderCode
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 94 "D:\Курьерская служба\Courier_service\Courier_service\Courier_service\Pages\NewOrder.razor"
       
	private static Action<string> setAddr;
	public bool mapReady { get; set; } = false;
	public LatLng popupLatLng { get; set; }
	public Marker startMarker { get; set; }
	public Marker finishMarker { get; set; }
	public string startStr { get; set; } = String.Empty;
	public string finishStr { get; set; } = String.Empty;
	public LocationProvider locationProvider { get; set; }


	protected override void OnInitialized()
	{

		contact = new Models.Contact();
		package = new Models.Package();
		route = new Models.Route();
		startMarker = new Marker(0f, 0f) { Title = "Отсюда" };
		finishMarker = new Marker(0f, 0f) { Title = "Сюда" };
		locationProvider = new LocationProvider(_clientFactory);

		setAddr = getDestAddr;

		_map = new BlazorLeaflet.Map(_jsRuntime);
		_map.OnInitialized += () =>
		{
			_map.OnContextMenu += (s, me) => { OpenPopup(s, me); };
			_mapController = new Services.LocationService.MapController(_jsRuntime, _clientFactory, _map);
			_mapController.EnablePopup();
			mapReady = true;
		};
		_map.Center = new LatLng(58.6035f, 49.668f);
		_map.Zoom = 10; _map.MinZoom = 10;
		_map.MaxBounds = Tuple.Create<LatLng, LatLng>(new LatLng(58.6784f, 49.4508f), new LatLng(58.545f, 49.8065f));
		_map.RaiseOnInitialized();
	}

	public void OpenPopup(BlazorLeaflet.Map sender, BlazorLeaflet.Models.Events.MouseEvent me)
	{
		popupLatLng = me.LatLng;
		_mapController.OpenMapPopup($"[{me.LatLng.Lat.ToString().Replace(',', '.')},{me.LatLng.Lng.ToString().Replace(',', '.')}]");
	}

	public void getDestAddr(string btn)
	{
		downloading = true;
		StateHasChanged();
		if (btn == "1")
		{
			_mapController.RemoveMarker(startMarker);
			route.StartAddress = locationProvider.GetAddress(popupLatLng.Lng, popupLatLng.Lat);

			if (route.StartAddress == null)
			{
				route.StartAddress = null;
				startStr = String.Empty;
				route.StartCoordinates = String.Empty;
				ShowErrorSnackBar("Адрес доставки не найден");
			}
			else
			{
				startMarker.Position = route.StartAddress.GetLatLng();
				startMarker.Popup = new Popup() { AutoClose = true, Content = route.StartAddress.ToString() };
				startStr = route.StartAddress.ToString();
				_mapController.AddMarkerAsync(startMarker);
				route.StartCoordinates = LocationProvider.makeStringLatlng(popupLatLng);
			}
		}
		else
		{
			_mapController.RemoveMarker(finishMarker);
			route.FinishAddress = locationProvider.GetAddress(popupLatLng.Lng, popupLatLng.Lat);
			if (route.FinishAddress == null)
			{
				route.FinishAddress = null;
				finishStr = String.Empty;
				route.FinishCoordinates = String.Empty;
				ShowErrorSnackBar("Адрес доствкаи не найден!");
			}
			else
			{
				finishMarker.Position = route.FinishAddress.GetLatLng();
				finishMarker.Popup = new Popup() { AutoClose = true, Content = route.FinishAddress.ToString() };
				finishStr = route.FinishAddress.ToString();
				_mapController.AddMarkerAsync(finishMarker, true);
				route.FinishCoordinates = LocationProvider.makeStringLatlng(popupLatLng);
			}
		}
		if (route.StartAddress != null && route.FinishAddress != null)
		{
			_mapController.deleteAllPolylines();
			distance = LocationDistance.DistanceBetweenPlaces(route.StartAddress.GetLatLng(), route.FinishAddress.GetLatLng());
			countPrice();
			_mapController.AddPathAndBound(LocationProvider.makePath(route.StartAddress.GetLatLng(), route.FinishAddress.GetLatLng()),
				"Расстояние: " + distance.ToString("N0") + " м<br>Стоимость: " + price.ToString("N0") + " ₽ за посылку " + selectedWeight);
		}
		downloading = false;
		StateHasChanged();
	}
	public void FoundAddress()
	{
		if (startStr != String.Empty && finishStr != String.Empty)
		{
			downloading = true;
			_mapController.deleteAllMarkers();
			_mapController.deleteAllPolylines();
			route.StartAddress = locationProvider.GetAddress(startStr);
			route.FinishAddress = locationProvider.GetAddress(finishStr);
			if (route.StartAddress != null && route.FinishAddress != null)
			{
				startMarker.Popup = new Popup() { AutoClose = true, Content = route.StartAddress.ToString() };
				startMarker.Position = route.StartAddress.GetLatLng();
				startStr = route.StartAddress.ToString();
				_mapController.AddMarkerAsync(startMarker);
				route.StartCoordinates = LocationProvider.makeStringLatlng(route.StartAddress.GetLatLng());

				finishMarker.Popup = new Popup() { AutoClose = true, Content = route.FinishAddress.ToString() };
				finishMarker.Position = route.FinishAddress.GetLatLng();
				finishStr = route.FinishAddress.ToString();
				_mapController.AddMarkerAsync(finishMarker);
				route.FinishCoordinates = LocationProvider.makeStringLatlng(route.FinishAddress.GetLatLng());

				_mapController.deleteAllPolylines();
				distance = LocationDistance.DistanceBetweenPlaces(route.StartAddress.GetLatLng(), route.FinishAddress.GetLatLng());
				countPrice();
				_mapController.AddPathAndBound(LocationProvider.makePath(route.StartAddress.GetLatLng(), route.FinishAddress.GetLatLng()),
					"Расстояние: " + distance.ToString("N0") + " м<br>Стоимость: " + price.ToString("N0") + " ₽ за посылку " + selectedWeight);
			}
			else
			{
				if (route.StartAddress == null) ShowErrorSnackBar("Адрес отправки не найден!");
				if (route.FinishAddress == null) ShowErrorSnackBar("Адрес доставки не найден!");
			}
			downloading = false;
		}
	}

	public void countPrice()
	{
		if (selectedWeight != String.Empty)
		{
			currentWeight = selectedWeight;
			if (selectedWeight == "< 1 kg") price = Convert.ToDecimal( distance * 0.1);
			else if (selectedWeight == "1 < 5 kg") price = Convert.ToDecimal( distance * 0.2);
			else if (selectedWeight == "5 < 10 kg") price = Convert.ToDecimal( distance * 0.4);
			else price = Convert.ToDecimal( distance * 0.6);
		}
		StateHasChanged();
	}

	[JSInvokable]
	public static void GetDistButton(string btn)
	{
		setAddr.Invoke(btn);
	}

	public void SelfContactChecked()
	{
		if (!selfContact)
		{
			if (client != null)
			{
				contact.FName = client.FName;
				contact.SName = client.SName;
				contact.Patronymic = client.Patronymic;
				contact.Phone = user.PhoneNumber;
			}
			else ShowErrorSnackBar("Вы не авторизованы!");
		}
		else
		{
			contact.FName = String.Empty;
			contact.SName = String.Empty;
			contact.Patronymic = String.Empty;
			contact.Phone = String.Empty;
		}
	}

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
