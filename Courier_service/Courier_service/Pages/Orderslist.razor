@page "/orderslist"

@attribute [Authorize(Roles = "Client")]

@inherits orderslistcode

@using BlazorLeaflet
@using BlazorLeaflet.Models
@using Courier_service.Services.LocationService
@using Courier_service.Models
@using System.Threading



<MudText Class="mb-4" Typo="Typo.h3">Orders list</MudText>
<MudOverlay Visible="@downloading" DarkBackground="true" Absolute="false" ZIndex="2000">
	<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
</MudOverlay>

@if (mapReady)
{
	<MudOverlay Visible="@mapVisible" DarkBackground="true" Absolute="false" ZIndex="2000" AutoClose="true">
		<div style="width: 400px; height: 400px;">
			<LeafletMap Map="@_map" />
		</div>
	</MudOverlay>
}

@if (dataLoaded)
{
	foreach (var order in orders)
	{
		<MudGrid>
			<MudItem xs="12">
				<MudPaper Class="d-flex align-center mud-full-width px-4 py-4" Elevation="3">
					<MudGrid Spacing="3">
						<MudItem Class="p-4 align-center" xs="12">
							<MudText Typo="Typo.h5">Order №@order.Id</MudText>
							<MudText Typo="Typo.body2">@order.Date.ToShortDateString()</MudText>
						</MudItem>
						<MudItem Class="p-4 align-center" xs="12" md="6" lg="3">
							<MudText Typo="Typo.h6">Package</MudText>
							<MudText Typo="Typo.body1">@order.Package.Description</MudText>
							<MudText Typo="Typo.body2">Weight: @order.Package.Weight</MudText>
						</MudItem>
						<MudItem Class="p-4 align-center" xs="12" md="6" lg="3">
							<MudText Typo="Typo.h6">Contact</MudText>
							<MudText Typo="Typo.body1">@order.Contact.FName</MudText>
							<MudText Typo="Typo.body1">@order.Contact.SName</MudText>
							<MudText Typo="Typo.body1">@order.Contact.Patronymic</MudText>
							<MudText Typo="Typo.body1">@order.Contact.Phone</MudText>
						</MudItem>
						<MudItem Class="p-4 align-center" xs="12" md="6" lg="3">
							<MudText Typo="Typo.h6">Route</MudText>
							<MudText Typo="Typo.body1">@order.Route.StartName</MudText>
							<MudIcon Icon="@Icons.Filled.ArrowDownward" />
							<MudText Typo="Typo.body1">@order.Route.FinishName</MudText>
							<MudButton OnClick="@(() => { mapVisible = true; showRouteOnMap(order.Route); })" Variant="Variant.Filled"
									   Class="m-2" Color="Color.Default">Show route</MudButton>
						</MudItem>
						<MudItem Class="p-4 align-center" xs="12" md="6" lg="3">
							<MudText Typo="Typo.body1">Status: @order.Status</MudText>
							@if (order.Delivery == null)
							{
								<MudText Typo="Typo.body1">Not delivering</MudText>
							}
						</MudItem>
						@if (order.Delivery != null)
						{
							<MudItem Class="p-4 align-center" xs="12">
								<MudText Typo="Typo.h6">Delivery</MudText>
								<MudText Typo="Typo.body1">Delivery start at @order.Date.ToShortDateString()</MudText>
								<MudText Typo="Typo.body1">Courier: @order.Delivery.Courier.ToString()</MudText>
							</MudItem>
						}
					</MudGrid>
				</MudPaper>
			</MudItem>
		</MudGrid>
	}
}

@code{
	[Inject]
	IJSRuntime _jsRuntime { get; set; }
	[Inject]
	IHttpClientFactory _clientFactory { get; set; }
	public bool mapVisible { get; set; } = false;
	public bool mapReady { get; set; } = false;
	protected Map _map { get; set; }
	protected MapController _mapController { get; set; }

	protected override void OnInitialized()
	{
		_map = new Map(_jsRuntime)
		{
			Center = new LatLng(58.6035f, 49.668f),
			Zoom = 10,
			ZoomControl = false,
			MaxBounds = Tuple.Create<LatLng, LatLng>(new LatLng(58.6784f, 49.4508f), new LatLng(58.545f, 49.8065f))
		};
		_map.OnInitialized += () =>
		{
			_mapController = new MapController(_jsRuntime, _clientFactory, _map);
			mapReady = true;
		};

		_map.RaiseOnInitialized();
	}

	public void showRouteOnMap(Route route)
	{
		if (mapReady)
		{
			_mapController.deleteAllMarkers();
			_mapController.deleteAllPolylines();
			LatLng sc = LocationDistance.ParseLatLng(route.StartCoordinates);
			LatLng fc = LocationDistance.ParseLatLng(route.FinishCoordinates);
			if (sc != null && fc != null)
			{
				//mapVisible = true;
				_mapController.AddMarker(sc);
				_mapController.AddMarker(fc);
				_mapController.AddPathAndBound($"[{route.StartCoordinates},{route.FinishCoordinates}]",
					$"Distance: {LocationDistance.DistanceBetweenPlaces(sc, fc)}");

			}
		}
	}
}
