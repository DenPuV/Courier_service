@page "/orderslist"

@attribute [Authorize(Roles = "Client")]

@inherits orderslistcode

@using BlazorLeaflet
@using BlazorLeaflet.Models
@using Courier_service.Services.LocationService
@using Courier_service.Models

@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudText Class="mb-4" Typo="Typo.h3">Orders list</MudText>
<MudOverlay Visible="@downloading" DarkBackground="true" Absolute="false" ZIndex="2000">
	<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
</MudOverlay>

@if (dataLoaded)
{
<MudGrid Class="align-center">
	@foreach (var order in orders)
	{
		<MudItem xs="12">
			<MudPaper Class="d-flex px-4 py-4" Elevation="3">
				<MudGrid Spacing="3">
					<MudItem Class="p-xs-1 p-md-4 align-center" xs="12">
						<MudText Typo="Typo.h5">Order №@order.Id</MudText>
						<MudText Typo="Typo.body2">@order.Date</MudText>
					</MudItem>
					<MudItem Class="p-xs-1 p-md-4 align-center" xs="12" sm="6" lg="3">
						<MudText Typo="Typo.h6">Package</MudText>
						<MudText Typo="Typo.body1">@order.Package.Description</MudText>
						<MudText Typo="Typo.body2">Weight: @order.Package.Weight</MudText>
						<MudText Typo="Typo.body2">Price: @order.Price ₽</MudText>
					</MudItem>
					<MudItem Class="p-xs-1 p-md-4 align-center" xs="12" sm="6" lg="3">
						<MudText Typo="Typo.h6">Contact</MudText>
						<MudText Typo="Typo.body1">@order.Contact.SName</MudText>
						<MudText Typo="Typo.body1">@order.Contact.FName</MudText>
						<MudText Typo="Typo.body1">@order.Contact.Patronymic</MudText>
						<MudText Typo="Typo.body1">@order.Contact.Phone</MudText>
					</MudItem>
					<MudItem Class="p-xs-1 p-md-4 align-center" xs="12" sm="6" lg="3">
						<MudText Typo="Typo.h6">Route</MudText>
						<MudText Typo="Typo.body1">@order.Route.StartName</MudText>
						<MudIcon Icon="@Icons.Filled.ArrowDownward" />
						<MudText Typo="Typo.body1">@order.Route.FinishName</MudText>
						<MudButton OnClick="@(() => { showRouteOnMap(order.Route); })" Variant="Variant.Filled"
								   Class="m-2" Color="Color.Default">Show route</MudButton>
					</MudItem>
					<MudItem Class="p-xs-1 p-md-4 align-center" xs="12" sm="6" lg="3">
						<MudText Typo="Typo.body1">Status: @order.Status</MudText>
						@if (order.Delivery != null)
						{
								<MudText Typo="Typo.h6">Delivery</MudText>
								<MudText Typo="Typo.body1">Delivery start at @order.Date.ToShortDateString()</MudText>
								<MudText Typo="Typo.body1">Courier: @order.Delivery.Courier.ToString()</MudText>
						}
					</MudItem>
					@if (order.Comments.Count > 0)
					{
						<MudText Class="p-xs-1 p-md-4 align-center" Typo="Typo.h6">Comments</MudText>
						foreach (Comment comment in order.Comments)
						{
							<MudItem Class="p-xs-1 p-md-4 align-center" xs="12">
								<MudText Typo="Typo.body1">@comment.Content</MudText>
								<MudText Typo="Typo.body2">@comment.Date</MudText>
								<hr>
							</MudItem>
						}
					}
					@if (!(order.Status == "cancelled" || order.Status == "reversed" || order.Status == "delivered"))
					{
						<MudItem xs="12" sm="6">
							<MudButton @onclick="@(() => OpenCommentDialog(order))"
									   Color="Color.Default">Leave comment</MudButton>
						</MudItem>
						<MudItem Class="p-xs-1 p-md-4 align-center" xs="12" sm="6">
							@if (order.Status != "delivering" && order.Status != "return")
							{
								<MudButton @onclick="@(() => CancellOrder(order))"
										   Color="Color.Primary" Variant="Variant.Filled">Cancel order</MudButton>
							}
							else if (order.Status == "delivering")
							{
								<MudButton @onclick="@(() => ReverseOrder(order))"
										   Color="Color.Primary" Variant="Variant.Filled">Return package</MudButton>
							}
						</MudItem>
					}
				</MudGrid>
			</MudPaper>
		</MudItem>
	}
</MudGrid>
}

@code{
	[Inject]
	IJSRuntime _jsRuntime { get; set; }
	[Inject]
	IHttpClientFactory _clientFactory { get; set; }
	public bool mapReady { get; set; } = false;
	protected Map _map { get; set; }
	protected MapController _mapController { get; set; }


	protected override void OnInitialized()
	{
		_map = new Map(_jsRuntime)
		{
			Center = new LatLng(58.6035f, 49.668f),
			Zoom = 10,
			ZoomControl = false,
			MaxBounds = Tuple.Create<LatLng, LatLng>(new LatLng(58.6784f, 49.4508f), new LatLng(58.545f, 49.8065f))
		};
		_map.OnInitialized += () =>
		{
			_mapController = new MapController(_jsRuntime, _clientFactory, _map);
			mapReady = true;
		};

		_map.RaiseOnInitialized();
	}

	public void showRouteOnMap(Route route)
	{
		if (mapReady)
		{
			var parameters = new DialogParameters { ["route"] = route, ["mapController"] = _mapController };
			var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };

			DialogService.Show<MapDialog>("Map", parameters, options);
		}
	}

	private async void OpenCommentDialog(Order order)
	{
		var parameters = new DialogParameters { ["orderId"] = order.Id, ["databaseService"] = _databaseService };
		var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };

		MudBlazor.DialogResult dr = await DialogService.Show<LeaveCommentDialog>("Comment Dialog", parameters, options).Result;

		if (dr.Cancelled == false && (bool)dr.Data == true)
		{
			order.Comments = (from comment in _databaseService._dbcontext.Comments
							  where comment.OrderId == order.Id
							  select comment).ToList<Comment>();
			InvokeAsync( () => StateHasChanged());
		}

	}

	private async void CancellOrder(Order order)
	{
		var parameters = new DialogParameters { ["content"] = "Cancel order?"};

		MudBlazor.DialogResult dr = await DialogService.Show<AcceptDialog>("You sure?", parameters).Result;

		if (dr.Cancelled == false && (bool)dr.Data == true)
		{
			try
			{
				if (_databaseService.CancellOrder(order) != null)
				{
					Snackbar.Add("Order cancelled!", Severity.Success);
					InvokeAsync(() => StateHasChanged());
				}
				else Snackbar.Add("Order not found!", Severity.Error);

			}
			catch (Exception e)
			{
				Snackbar.Add(e.Message, Severity.Error);
			}
		}
	}

	private async void ReverseOrder(Order order)
	{
		var parameters = new DialogParameters { ["content"] = "Reverse order?" };

		MudBlazor.DialogResult dr = await DialogService.Show<AcceptDialog>("You sure?", parameters).Result;

		if (dr.Cancelled == false && (bool)dr.Data == true)
		{
			try
			{
				_databaseService.PlaceReverseOrder(order);
				Snackbar.Add("Oreder reversed!", Severity.Success);

			}
			catch (Exception e)
			{
				Snackbar.Add(e.Message, Severity.Error);
			}
		}
		StateHasChanged();
	}
}
