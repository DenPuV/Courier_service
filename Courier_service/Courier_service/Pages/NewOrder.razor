@page "/neworder"

@attribute [Authorize(Roles = "Client")]

@using BlazorLeaflet.Models
@using Courier_service.Services.LocationService

@inherits NewOrderCode

<MudOverlay Visible="@downloading" DarkBackground="true" Absolute="true" ZIndex="2000">
	<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
</MudOverlay>
<MudText Typo="Typo.h3">Create new order</MudText>

<AuthorizeView Roles="Client">
	<MudGrid>

		<MudItem xs="12" md="6">
			<MudCard Elevation="3">
				<MudCardContent>
					<MudText>
						Package description
					</MudText>
					<MudTextField Variant="Variant.Outlined" Required="true" Label="Package description" Lines="8"
								  @bind-Value="@package.Description" />
					<MudSelect RequiredError="Choose weight" @bind-Value="@selectedWeight" Required="true" HelperText="Pick package weight" T="string" Label="Weight">
						<MudSelectItem Value="@("< 1 kg")" />
						<MudSelectItem Value="@("1 < 5 kg")" />
						<MudSelectItem Value="@("5 < 10 kg")" />
						<MudSelectItem Value="@("> 10 kg")" />
					</MudSelect>
				</MudCardContent>
			</MudCard>
		</MudItem>

		<MudItem xs="12" md="6">
			<MudCard Elevation="3">
				<MudCardContent>
					<MudText>
						Contact information
					</MudText>
					<MudTextField Disabled="@(selfContact)" Label="First name" Required="true"
								  @bind-Value="@contact.FName" />
					<MudTextField Disabled="@(selfContact)" Label="Second name" Required="true"
								  @bind-Value="@contact.SName" />
					<MudTextField Disabled="@(selfContact)" Label="Patronymic"
								  @bind-Value="@contact.Patronymic" />
					<MudTextField Disabled="@(selfContact)" Label="Phone" Required="true"
								  @bind-Value="@contact.Phone" />
					<MudCheckBox @onclick="@SelfContactChecked" Label="Contact is me" @bind-Checked="selfContact" />
				</MudCardContent>
			</MudCard>
		</MudItem>
		<MudBlazor.MudDivider />
		<MudItem xs="12" md="6" lg="8">
			@if (mapReady)
			{
				<div style="height: 400px; width: 100%;">
					<BlazorLeaflet.LeafletMap Map="@_map" />
				</div>
			}
			else
			{
				<MudSkeleton Height="400px" Width="100%" />
			}
		</MudItem>

		<MudItem xs="12" md="6" lg="4">
			<MudCard Elevation="3">
				<MudCardContent>
						<MudText>Destionations</MudText>
						<MudTextField Label="Sending address" Required="true"
									  @bind-Value="@startStr" />
						<MudTextField Label="Reciving address" Required="true"
									  @bind-Value="@finishStr" />
						<MudBlazor.MudDivider />
						<MudButton @onclick="FoundAddress" Style="margin-top: 2em" Variant="Variant.Filled" Color="Color.Default">Make route</MudButton>

						@if (!downloading && distance != 0 && price != 0)
						{
							<MudText Style="margin-top: 2em">Distance: @distance.ToString("N0") m</MudText>
							<MudText Style="margin-top: 2em">Price: @price.ToString("N0") ₽</MudText>
						}
				</MudCardContent>
			</MudCard>
		</MudItem>

		<MudItem xs="12">
			<MudButton @onclick="PlaceOrder" Variant="Variant.Filled" Color="Color.Primary">Place order</MudButton>
		</MudItem>
	</MudGrid>
</AuthorizeView>

@code {
	private static Action<string> setAddr;
	public bool mapReady { get; set; } = false;
	public LatLng popupLatLng { get; set; }
	public Marker startMarker { get; set; }
	public Marker finishMarker { get; set; }
	public string startStr { get; set; } = String.Empty;
	public string finishStr { get; set; } = String.Empty;
	public LocationProvider locationProvider { get; set; }


	protected override void OnInitialized()
	{

		contact = new Models.Contact();
		package = new Models.Package();
		route = new Models.Route();
		startMarker = new Marker(0f, 0f) { Title = "From here" };
		finishMarker = new Marker(0f, 0f) { Title = "To here" };
		locationProvider = new LocationProvider(_clientFactory);

		setAddr = getDestAddr;

		_map = new BlazorLeaflet.Map(_jsRuntime);
		_map.OnInitialized += () =>
		{
			_map.OnContextMenu += (s, me) => { OpenPopup(s, me); };
			_mapController = new Services.LocationService.MapController(_jsRuntime, _clientFactory, _map);
			_mapController.EnablePopup();
			mapReady = true;
		};
		_map.Center = new LatLng(58.6035f, 49.668f);
		_map.Zoom = 10; _map.MinZoom = 10;
		_map.MaxBounds = Tuple.Create<LatLng, LatLng>(new LatLng(58.6784f, 49.4508f), new LatLng(58.545f, 49.8065f));
		_map.RaiseOnInitialized();
	}

	public void OpenPopup(BlazorLeaflet.Map sender, BlazorLeaflet.Models.Events.MouseEvent me)
	{
		popupLatLng = me.LatLng;
		_mapController.OpenMapPopup($"[{me.LatLng.Lat.ToString().Replace(',', '.')},{me.LatLng.Lng.ToString().Replace(',', '.')}]");
	}

	public void getDestAddr(string btn)
	{
		downloading = true;
		StateHasChanged();
		if (btn == "1")
		{
			_mapController.RemoveMarker(startMarker);
			route.StartAddress = locationProvider.GetAddress(popupLatLng.Lng, popupLatLng.Lat);

			if (route.StartAddress == null)
			{
				route.StartAddress = null;
				startStr = String.Empty;
				route.StartCoordinates = String.Empty;
				ShowErrorSnackBar("Sending address not found!");
			}
			else
			{
				startMarker.Position = route.StartAddress.GetLatLng();
				startMarker.Popup = new Popup() { AutoClose = true, Content = route.StartAddress.ToString() };
				startStr = route.StartAddress.ToString();
				_mapController.AddMarkerAsync(startMarker);
				route.StartCoordinates = LocationProvider.makeStringLatlng(popupLatLng);
			}
		}
		else
		{
			_mapController.RemoveMarker(finishMarker);
			route.FinishAddress = locationProvider.GetAddress(popupLatLng.Lng, popupLatLng.Lat);
			if (route.FinishAddress == null)
			{
				route.FinishAddress = null;
				finishStr = String.Empty;
				route.FinishCoordinates = String.Empty;
				ShowErrorSnackBar("Recivig address not found!");
			}
			else
			{
				finishMarker.Position = route.FinishAddress.GetLatLng();
				finishMarker.Popup = new Popup() { AutoClose = true, Content = route.FinishAddress.ToString() };
				finishStr = route.FinishAddress.ToString();
				_mapController.AddMarkerAsync(finishMarker);
				route.FinishCoordinates = LocationProvider.makeStringLatlng(popupLatLng);
			}
		}
		if (route.StartAddress != null && route.FinishAddress != null)
		{
			_mapController.deleteAllPolylines();
			distance = LocationDistance.DistanceBetweenPlaces(route.StartAddress.GetLatLng(), route.FinishAddress.GetLatLng());
			countPrice();
			_mapController.AddPathAndBound(LocationProvider.makePath(route.StartAddress.GetLatLng(), route.FinishAddress.GetLatLng()),
				"Disctance: " + distance.ToString("N0") + " m<br>Price: " + price.ToString("N0") + " ₽ for package " + selectedWeight);
		}
		downloading = false;
		StateHasChanged();
	}
	public void FoundAddress()
	{
		if (startStr != String.Empty && finishStr != String.Empty)
		{
			downloading = true;
			_mapController.deleteAllMarkers();
			_mapController.deleteAllPolylines();
			route.StartAddress = locationProvider.GetAddress(startStr);
			route.FinishAddress = locationProvider.GetAddress(finishStr);
			if (route.StartAddress != null && route.FinishAddress != null)
			{
				startMarker.Popup = new Popup() { AutoClose = true, Content = route.StartAddress.ToString() };
				startMarker.Position = route.StartAddress.GetLatLng();
				startStr = route.StartAddress.ToString();
				_mapController.AddMarkerAsync(startMarker);
				route.StartCoordinates = LocationProvider.makeStringLatlng(route.StartAddress.GetLatLng());

				finishMarker.Popup = new Popup() { AutoClose = true, Content = route.FinishAddress.ToString() };
				finishMarker.Position = route.FinishAddress.GetLatLng();
				finishStr = route.FinishAddress.ToString();
				_mapController.AddMarkerAsync(finishMarker);
				route.FinishCoordinates = LocationProvider.makeStringLatlng(route.FinishAddress.GetLatLng());

				_mapController.deleteAllPolylines();
				distance = LocationDistance.DistanceBetweenPlaces(route.StartAddress.GetLatLng(), route.FinishAddress.GetLatLng());
				countPrice();
				_mapController.AddPathAndBound(LocationProvider.makePath(route.StartAddress.GetLatLng(), route.FinishAddress.GetLatLng()),
					"Disctance: " + distance.ToString("N0") + " m<br>Price: " + price.ToString("N0") + " ₽ for package " + selectedWeight);
			}
			else
			{
				if (route.StartAddress == null) ShowErrorSnackBar("Sending address not found!");
				if (route.FinishAddress == null) ShowErrorSnackBar("Reciving address not found!");
			}
			downloading = false;
		}
	}

	public void countPrice()
	{
		if (selectedWeight != String.Empty)
		{
			if (selectedWeight == "< 1 kg") price = Convert.ToDecimal( distance * 0.3);
			else if (selectedWeight == "1 < 5 kg") price = Convert.ToDecimal( distance * 0.4);
			else if (selectedWeight == "5 < 10 kg") price = Convert.ToDecimal( distance * 0.5);
			else price = Convert.ToDecimal( distance);
		}
		StateHasChanged();
	}

	[JSInvokable]
	public static void GetDistButton(string btn)
	{
		setAddr.Invoke(btn);
	}

	public void SelfContactChecked()
	{
		if (!selfContact)
		{
			if (client != null)
			{
				contact.FName = client.FName;
				contact.SName = client.SName;
				contact.Patronymic = client.Patronymic;
				contact.Phone = user.PhoneNumber;
			}
			else ShowErrorSnackBar("You are not authorized!");
		}
		else
		{
			contact.FName = String.Empty;
			contact.SName = String.Empty;
			contact.Patronymic = String.Empty;
			contact.Phone = String.Empty;
		}
	}
}
